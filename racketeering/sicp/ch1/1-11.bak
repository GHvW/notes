;;; recursive

(define (f n)
  (if (< n 3) n
        (+ (f (- n 1))
           (* 2 (f (- n 2)))
           (* 3 (f (- n 3))))))

;;; iterative
(define (f-iter x y total count n)
  (cond ((< n 3) n)
        ((= count n) total)
        (else (f-iter y total (+ (* 3 x) (* 2 y) total) (+ count 1) n))))

(define (f n) (f-iter 0 1 2 2 n))
